download.file("https://s3.amazonaws.com/coursera-uploads/user-37feb55dbc760de803df135d/973499/asst-3/a8ed84f0d01011e493816d53a025d44c.txt")
download.file("https://s3.amazonaws.com/coursera-uploads/user-37feb55dbc760de803df135d/973499/asst-3/a8ed84f0d01011e493816d53a025d44c.txt",destfile="data.csv")
data <- read.table("data.csv",row.name=FALSE)
data <- read.table("data.csv")
View(data)
download.file("https://s3.amazonaws.com/coursera-uploads/user-db3eba17736ba356260ae6d8/973499/asst-3/a6db91b0d00c11e49119fd723df9aaf1.txt",destfile="data.csv")
data <- read.table("data.csv")
View(data)
download.file("https://s3.amazonaws.com/coursera-uploads/user-e6d5a808537be4475f544c3e/973499/asst-3/32e72620cfe411e482fdad60509c80c1.txt",destfile="data.csv")
data <- read.table("data.csv")
View(data)
download.file("https://s3.amazonaws.com/coursera-uploads/user-bb8a5a56ebfac9f2f9818595/973499/asst-3/835d19b0d00811e493816d53a025d44c.txt",destfile="data.csv")
data <- read.table("data.csv")
View(data)
?kmean
library("stats", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.1.2/library")
data(iris)
iris.dat <- iris
View(iris.dat)
kmeans(iris.dat[,1:4],5)
k<-kmeans(iris.dat[,1:4],5)
k$centers
y <- k$centers
str(y)
y
k$withinss
cbind(iris.dat,k$cluster)
iris.dat <-cbind(iris.dat,k$cluster)
y <- as.data.frame(y)
View(y)
library("lattice", lib.loc="C:/Program Files/R/R-3.1.2/library")
xyplot(Sepal.Length~Sepal.Width|k$cluster,iris.dat)
xyplot(Sepal.Length~Petal.Width|k$cluster,iris.dat)
?xyplot
xyplot(Sepal.Length~Petal.Width|k$cluster,iris.dat)
xyplot(Sepal.Length~Petal.Width, col=k$cluster,iris.dat)
View(mtcars)
?mtcars
mtcars$cyl <- relevel(as.factor(mtcars$cyl),"8")
mtcars$cyl
cor(mtcars)
data(mtcars)
cor(mtcars)
seq(1:9)
seq(paste(reg,1:9))
seq(paste(rep(reg,9),1:9))
?rep
rep(reg,9)
rep("reg",9)
seq(paste(rep("reg",9),1:9))
paste(rep("reg",9),1:9)
paste(rep("reg",9),1:9,sep = "")
reg1 <- lm(mpg~am+wt,data=mtcars)
reg2 <- lm(mpg~am+wt+cyl,data=mtcars)
reg3 <- lm(mpg~am+wt+cyl+disp,data=mtcars)
reg4 <- lm(mpg~am+wt+cyl+disp+hp,data=mtcars)
reg5 <- lm(mpg~am+wt+cyl+disp+hp+drat,data=mtcars)
reg6 <- lm(mpg~am+wt+cyl+disp+hp+drat+vs,data=mtcars)
reg7 <- lm(mpg~am+wt+cyl+disp+hp+drat+vs+carb,data=mtcars)
reg8 <- lm(mpg~am+wt+cyl+disp+hp+drat+vs+carb+gear,data=mtcars)
reg9 <- lm(mpg~am+wt+cyl+disp+hp+drat+vs+carb+gear+qsec,data=mtcars)
anova(paste(rep("reg",9),1:9,sep = ""))
reg <- as.list(paste(rep("reg",9),1:9,sep = ""))
anova(reg)
reg
reg <- as.vector(paste(rep("reg",9),1:9,sep = ""))
reg
anova(reg1, reg2, reg3, reg4, reg5, reg6, reg7, reg8, reg9)
reg10 <- lm(mpg~am+wt+disp+qsec,data=mtcars)
anova(reg1,reg10)
reg10 <- lm(mpg~am+wt+cyl+disp+qsec,data=mtcars)
anova(reg2,reg10)
reg10 <- lm(mpg~am+wt+cyl+hp+qsec,data=mtcars)
anova(reg2,reg10)
reg10 <- lm(mpg~am+wt+cyl+hp,data=mtcars)
anova(reg2,reg10)
summary(reg10)
mtcars$cyl <- relevel(as.factor(mtcars$cyl),"8")
summary(reg10)
reg10 <- lm(mpg~am+wt+cyl+hp,data=mtcars)
summary(reg10)
data(mtcars)
cor(mtcars)
sqrt(vif(reg10)) > 2
library("MASS", lib.loc="C:/Program Files/R/R-3.1.2/library")
?kappa
install.packages("car")
library("car", lib.loc="~/R/win-library/3.1")
sqrt(vif(reg10)) > 2
vif(reg10)
mtcars$cyl <- relevel(as.factor(mtcars$cyl),"8")
reg10 <- lm(mpg~am+wt+cyl+hp,data=mtcars)
vif(reg10)
final.reg <- lm(mpg~am+qsec+wt,data=mtcars)
vif(final.reg)
sqrt(vif(final.reg))>2
sqrt(vif(reg10))>2
summary(final.reg)$coef
summary(final.reg)
s <-summary(final.reg)
vif(reg10)
v <- vif(reg10)
v
sqrt(v[,1])
sqrt(v[,1])>2
reg10$formula
reg10$terms
reg10$terms$formula
reg10$terms[1]
reg10$terms[,1]
reg10$terms[1,]
s <- reg10$terms
s
values(s)
value(s)
str(s)
round(summary(final.reg)$coef,3)
library(swirl)
swirl()
swirl()
install_from_swirl("Statistical Inference")
swirl()
data(airquality)
df <- airquality
View(airquality)
str(df)
df[,c("Ozone","Temp")]
df[,c("Ozone">31,"Temp"90)]
df[,c("Ozone">31,"Temp">90)]
df[,Ozone > 31]
df[,df$Ozone > 31]
df[,c("Ozone","Temp"),df$Ozone > 31]
df[,c("Ozone","Temp")]>31
df[df$Ozone>31 & df$Temp > 91,c("Ozone","Temp")]
df[df$Ozone > 31 & df$Temp > 91, ]
df[Ozone > 31 & Temp > 91, ]
mean(df[df$Ozone > 31 & df$Temp > 91, ]$Solar.R, na.rm=TRUE)
mean(df[df$Ozone > 31 & df$Temp > 91, ]$Solar.R)
mean(df[df$Ozone > 31 & df$Temp > 91, ]$Solar.R, na.rm=TRUE)
mean(df[df$Ozone > 31 & df$Temp > 90, ]$Solar.R, na.rm=TRUE)
df$Ozone > 31
df$Temp > 90
df$Ozone > 31 & df$Temp > 90
df[df$Ozone > 31 & df$Temp > 90, ]
df[df$Ozone > 31 & df$Temp > 90, ]$Solar.R
install.packages("tm")
library("tm", lib.loc="~/R/win-library/3.1")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("caret")
library("caret", lib.loc="~/R/win-library/3.1")
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.1")
inTrain <- createDataPartition(segmentationOriginal$Case,p = .75,list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
set.seed(125)
modelFit <- train(class~., data = training, method = "rpart")
names(training)
set.seed(125)
modelFit <- train(Class ~., data = training, method = "rpart")
install.packages("e1071")
library("caret", lib.loc="~/R/win-library/3.1")
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.1")
library("e1071", lib.loc="~/R/win-library/3.1")
install.packages("rpart")
library("caret", lib.loc="~/R/win-library/3.1")
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.1")
library("e1071", lib.loc="~/R/win-library/3.1")
set.seed(125)
modelFit <- train(Class ~., data = training, method = "rpart")
a = c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
b = c(TotalIntench2 = 50,000, FiberWidthCh1 = 10, VarIntenCh4 = 100)
c = c(TotalIntench2 = 57,000, FiberWidthCh1 = 8, VarIntenCh4 = 100)
d = c(FiberWidthCh1 = 8, VarIntenCh4 = 100, PerimStatusCh1=2)
as.data.frame(list(a,b,c,d))
a
b
c
d
a = c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
a
a = c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
b = c(TotalIntench2 = 50000, FiberWidthCh1 = 10, VarIntenCh4 = 100)
c = c(TotalIntench2 = 57000, FiberWidthCh1 = 8, VarIntenCh4 = 100)
d = c(FiberWidthCh1 = 8, VarIntenCh4 = 100, PerimStatusCh1=2)
as.data.frame(list(a,b,c,d))
as.data.frame(a,b,c,d)
predict(modelFit,a)
levels(segmentationOriginal$Case)
training <- segmentationOriginal[segmentationOriginal$Case=="Train", ]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test", ]
set.seed(125)
modelFit <- train(Class ~., data = training, method = "rpart")
install.packages("rattle")
library("rattle", lib.loc="~/R/win-library/3.1")
fancyRpartPlot(modelFit$finalModel)
install.packages("rpart.plot")
library("rattle", lib.loc="~/R/win-library/3.1")
library("rpart.plot", lib.loc="~/R/win-library/3.1")
fancyRpartPlot(modelFit$finalModel)
finalModel
modelFit
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
library(caret)
modelFit2 <- train(Area ~., data = olive, method="class")
modelFit2 <- train(Area ~., data = olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(modelFit2, newdata)
summary(olive$Area)
olive$Area
install.packages("ElemStatLearn")
library("ElemStatLearn", lib.loc="~/R/win-library/3.1")
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
install.packages("randomForest")
library("randomForest", lib.loc="~/R/win-library/3.1")
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library("caret", lib.loc="~/R/win-library/3.1")
a <- train(y ~ ., data = vowel.train)
set.seed(33833)
a <- train(y ~ ., data = vowel.train, method = "rf")
b <- varImp(a)
order(b)
b
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- train(y ~ ., data = vowel.train, method = "rf")
library("caret", lib.loc="~/R/win-library/3.1")
a <- train(y ~ ., data = vowel.train, method = "rf")
a2 <- train(y ~., data = vowel.train, method = "gbm")
predict(a,vowel.test)
pred1 <- predict(a, vowel.test)
pred2 <- predict(a2, vowel.test)
confusionMatrix(pred1,pred2,reference = vowel.test$y)
confusionMatrix(pred1,pred2,reference = as.character(vowel.test$y))
,reference = vowel.test$y)
confusionMatrix(pred1,reference = vowel.test$y)
confusionMatrix(pred2,reference = vowel.test$y)
table(pred1,pred2)
combined_df <- as.data.frame(pred1, pred2, y = vowel.test$y)
combined_df <- data.frame(pred1, pred2, y = vowel.test$y)
View(combined_df)
finalFit <- train(y ~., data=combined_df, method="gam")
pred3 <- predict(finalFit, vowel.test)
confusionMatrix(finalFit, vowel.test$y)
confusionMatrix(finalFit, reference = vowel.test$y)
finalFit
confusionMatrix(pred3, reference = vowel.test$y)
View(combined_df)
finalFit <- train(y ~., data=combined_df, method="gam")
pred3 <- predict(finalFit, vowel.test)
pred3
?colSums
?lm
?dgamma
?predict
?getMethod
?getClass
getClass("lm")
getMethod("lm")
showMethods("sum")
showMethods("sd")
showMethods("colSums")
?model.load
install.packages("yhat")
?model.load
?model.predict
?model.transform
?model.require
library(shiny)
library(ggplot2)
library(dplyr)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='dripdrop',
token='12FF545F2048026B27A1EC50499E40D6',
secret='/Och4u5aPFxkA6I/RR7y8HqVcggoUZoqGU7P25zA')
library(shinyapps)
shinyapps::deployApp('C:/Users/Jon/Desktop/JHU Data Specialization/Developing Data Products/DataProducts/app1')
library("RColorBrewer", lib.loc="~/R/win-library/3.1")
display.brewer.all(n=10, exact.n=FALSE)
devAskNewPage(ask=TRUE)
display.brewer.pal(7,"BrBG")
mypalette<-brewer.pal(7,"Greens")
image(1:7,1,as.matrix(1:7),col=mypalette,xlab="Greens (sequential)",
ylab="",xaxt="n",yaxt="n",bty="n")
display.brewer.all(n=5,type="div",exact.n=TRUE)
display.brewer.all(colorblindFriendly=TRUE)
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
data <- iris
str(iris)
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
theme_wsj()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
theme_economist()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
theme_economist_white()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
theme_pander()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)")
theme_pander()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_pander()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_tufte()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_excel()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_fivethirtyeight()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_update()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_text()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_stata()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_solid()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_solarized_2()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_solarized()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_minimal()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_map()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_linedraw()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_light()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_igray()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_gray()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_gdocs()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_foundation()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_few()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_fivethirtyeight()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_hc()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_classic()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_calc()
ggplot(data=data, aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Petal.Length)) +
geom_point()+
labs(title="Flowers! For You :)") +
theme_pander()
show_col(economist_pal(fill=TRUE)(6))
economist_pal(stata = FALSE, fill = TRUE)
setwd("~/GitHub/FI_Meetup")
library(shiny)
library(dplyr)
library(qdap)
library(data.table)
library(tm)
library(stringdist)
# Set working directory #
setwd("~/GitHub/FI_Meetup")
# SEC URL #
sec_url <- function(Year, Quarter){
s = tolower(substitute(Quarter))
if(!Year %in% seq(2009, 2015, 1)){
warning("SEC data is only available between 2009 and 2015")
return(NA)
} else if (!s %in% c("q1", "q2", "q3", "q4")){
warning("Please enter q1, q2, q3, or q4 for Quarter")
return(NA)
} else{
paste0("http://www.sec.gov/data/financial-statements/", Year, as.character(s), ".zip")
}
}
# Download SEC Data #
temp <- tempfile()
set_url <- sec_url(2015, q2)
download.file(set_url, temp, mode = "wb")
unzip(temp) # HARD CODED
num <- fread("num.txt", stringsAsFactors = F)
subm <- fread("sub.txt", stringsAsFactors = F)
datatag <- fread("tag.txt", stringsAsFactors = F)
pre <- fread("pre.txt", stringsAsFactors = F)
unlink(temp)
## Note The SEC website folder http://www.sec.gov/Archives/edgar/data/{cik}/{accession}/
## will always contain all the files for a given submission, where {accession} is the adsh
## with the â-âcharacters removed.
# Download Consumer Financial Protection Bureau Data #
if(!file.exists("cfpb.csv")){
download.file("http://data.consumerfinance.gov/api/views/s6ew-h6mp/rows.csv", "cfpb.csv")
}
cfpb <- fread("cfpb.csv")
# Remove punctuation, whitespace, and lower case company names #
subm$name <- subm$name %>% tolower() %>% removePunctuation() %>% stripWhitespace()
cfpb$Company <- cfpb$Company %>% tolower() %>% removePunctuation() %>% stripWhitespace()
# Replace the CFPB name for Citi with the SEC name #
cfpb$Company <- gsub("citibank", "citigroup", cfpb$Company)
# remove states and other endings from company names #
state <- tolower(unique(subm$stprba))
legal_entity <- c("inc", "corp", "co", "plc", "ltd", "llc",
"company", "companymn", "holdings", "financial services", "services",
"financial", "corporation", "group", "bank", "banks")
endings <- c(state, legal_entity)
## CFPB ##
for (i in 1:length(endings)){
cfpb$Company <- gsub(paste(" ", endings[i], "$", sep = ""), "", cfpb$Company)
}
## SEC ##
for (i in 1:length(endings)){
subm$name <- gsub(paste(" ", endings[i], "$", sep = ""), "", subm$name)
}
# Merge the SEC and CFPB data on cleaned company name #
both <- merge(subm, cfpb, by.x = "name", by.y = "Company")
# QC metrics for the merge #
merge_percent_companies <- length(unique(both$name)) / length(unique(cfpb$Company))
merge_percent_of_complaints <- sum(cfpb$Company %in% unique(both$name)) / nrow(cfpb)
install.packages("qdap")
install.packages("stringdist")
library(shiny)
library(dplyr)
library(qdap)
library(data.table)
library(tm)
library(stringdist)
View(cfpb)
View(subm)
both <- merge(subm, cfpb, by.x = "name", by.y = "Company")
both <- merge(x = subm, y = cfpb, by.x = "name", by.y = "Company")
View(subm)
